generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id                Int      @id @default(autoincrement())
  name              String
  phone             String   @unique
  password          String
  isVerified        Boolean  @default(false)
  verificationCode  Int?
  codeExpiry        DateTime?
  logo              String?
  services          Service[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("shops")
}

model Service {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  guestCount  Int            @default(1)
  pricing     Pricing[]      @relation("ServicePricing")
  additionalOptions AdditionalOption[] @relation("ServiceAdditionalOptions")
  categories  Category[]     @relation("ServiceCategories")
  bookings    Booking[]
  location    Location?      @relation(fields: [locationId], references: [id])
  locationId  Int?           @unique
  reviews     Review[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  shopId      Int
  shop        Shop           @relation(fields: [shopId], references: [id])

  @@map("services")
}

model Pricing {
  id          Int     @id @default(autoincrement())
  price       Float
  salePrice   Float?
  pricingUnit String
  minQuantity Int     @default(1)
  maxQuantity Int?
  additionalOptionId Int?
  additionalOption   AdditionalOption? @relation(fields: [additionalOptionId], references: [id])
  serviceId   Int
  service     Service @relation("ServicePricing", fields: [serviceId], references: [id])

  @@map("pricings")
}

model AdditionalOption {
  id        Int      @id @default(autoincrement())
  name      String
  pricing   Pricing[]
  serviceId Int
  service   Service @relation("ServiceAdditionalOptions", fields: [serviceId], references: [id])

  @@map("additional_options")
}

model Booking {
  id                    Int             @id @default(autoincrement())
  maxDaysAfterBooking   Int             @default(7)
  schedules             WeeklySchedule[]
  serviceId             Int
  service               Service         @relation(fields: [serviceId], references: [id])
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@map("bookings")
}

model WeeklySchedule {
  id                     Int      @id @default(autoincrement())
  day                    DayOfWeek
  available              Boolean
  startTime              DateTime?
  endTime                DateTime?
  bookingInterval        Int?
  bookingLimitAtSameTime Int?
  bookingId              Int
  booking                Booking  @relation(fields: [bookingId], references: [id])

  @@unique([day, bookingId])
  @@map("weekly_schedules")
}

model Location {
  id         Int      @id @default(autoincrement())
  address    String
  cityId     Int
  city       City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  districtId Int
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  latitude   Float?
  longitude  Float?
  service    Service?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("locations")
}

model City {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  districts District[]
  locations Location[]

  @@map("cities")
}

model District {
  id      Int    @id @default(autoincrement())
  name    String
  cityId  Int
  city    City   @relation(fields: [cityId], references: [id])
  locations Location[]

  @@unique([name, cityId])
  @@map("districts")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  score     Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  serviceId Int
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId])
  @@map("reviews")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  services Service[]  @relation("ServiceCategories")

  @@map("categories")
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  password  String
  firstName String
  lastName  String
  isVerified Boolean  @default(false)
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}